# Working with DBMS using R



**Introduction**

- Various DBMSs can be worked with using R
- The specific way that this is done differ between the DBMSs and operating system




**Working with ODBC-compliant DBMS from ODBC-compliant applications**

- **The General Process**
  - ODBC-compliant DBMSs and applications are those that adhere to ODBC standards thus can be connected through ODBC 
  - ODBC-compliant DBMSs include Microsoft SQL Server, Microsoft Access, and MySQL, ODBC-compliant applications include R, Python, Excel, and SPSS
  - Working with an ODBC-compliant DBMS from an ODBC-compliant application necessarily involves, in addition to the application and the DBMS, an ODBC interface, an ODBC manager, and a DBMS-specific ODBC driver, all for mediating the connection between the application and the DBMS. 
  - Upon a request being called by the application, the application sends the application-specific call to the ODBC interface, the ODBC interface translates the application-specific calls from the application to an ODBC call, which is a call adhering to the ODBC standards, through its ODBC functions, it then establishes a connection with and sends the ODBC call to the DBMS-specific ODBC driver either directly or indirectly through the ODBC manager, which manages one or more DBMS-specific ODBC drivers. 
  - The DBMS-specific ODBC driver translates the ODBC call to a DBMS-specific call (which may involve DBMS-specific SQL), it then establishes a connection to and sends the DBMS-specific call to the DBMS (e.g. its server/engine) where the call is executed. 
  - If the call involves extracting information from the DBMS, the DBMS sends the information to its DBMS-specific ODBC driver, the DBMS-specific ODBC driver fetches the information from the DBMS, translates it to an ODBC information, and sends it to the ODBC interface, the ODBC interface fetches the ODBC information from the DBMS-specific driver and may further process it (e.g. translation) if there is an upper layer (e.g. application). 
- **General Steps**
  1. **Make sure an ODBC manager is ready for use**
      - ODBC managers are usually an individual software/programme that are specific to an operating system, hence, they should be considered with regards to specific operating systems:
        - **Windows OS**
          - Windows OS comes with an ODBC manager in the form of a system application called "ODBC Data Source Administrator". 
        - **MacOS**
          - MacOs used to come with an ODBC manager in form of system application called "ODBC Administrator" until Mac OS "Snow Leopard" from which ODBC managers for MacOS are downloaded from external developers. ODBC managers for MacOS include:
            - **ODBC Manager** 
              - ODBC Manager is free proprietary ODBC manager developed by Actual Technologies 
              - Go to <a href = "https://odbcmanager.net/" target = "_blank"> ODBC Manger </a> to learn more or download 
            - **Independent ODBC (iODBC) for MacOS** 
              - iODBC is both an open-source initiative initiated and managed by OpenLink Software that encourages the open-source development of ODBC managers for various Linux or Unix-based OS (incl. MacOS) and the ODBC managers under this initiative 
              - Go to <a href = "https://www.iodbc.org/dataspace/doc/iodbc/wiki/iodbcWiki/WelcomeVisitors" target = "_blank"> iODBC </a> to learn more about iODBC and to download
  2. **Make sure an ODBC driver for the DBMS is ready for use**
      - ODBC-specific ODBC drivers are usually an individual software/programme that is specific to a DBMS, hence, they should be considered with regards to the DBMS:
        - **Microsoft SQL Server** 
          - **ODBC Driver for SQL Server**
            - Developed and distributed by Microsoft 
            - Go to <a href = "https://learn.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver16" target = "_blank"> ODBC Driver for SQL Server </a> to learn more or download 
        - **MySQL**
          - **Connector/ODBC**
            - Developed and distributed by MySQL 
            - Go to <a href = "https://dev.mysql.com/downloads/connector/odbc/" target = "_blank"> MySQL </a> to download
  3. **Make sure an ODBC interface is ready for use**
      - ODBC interfaces are usually specific to the application and exist as either an in-built functionality of the application or an extension (e.g. packages/modules/plug-ins), hence, they should be considered with regards to the application:
        - **R**
          - ODBC interfaces for R are in the form of R packages (aka ODBC interface R packages) with specific operations handled by specific functions. There are multiple ODBC interface R packages that are independently capable of working with an ODBC-compliant DBMS. The main ODBC interface R packages are:
            - **DBI**
              - An R package in CRAN developed by R Special Interest Group on Databases (R-SIG-DB) and Hadley Wickham and maintained by Kirill MÃ¼ller
              - Install/update the DBI package from CRAN by running the R command if it hasn't been installed/needs to be updated 
              - <details><summary>Installation guidance</summary>
                - Install the package `DBI` by running the following R codes
                  ```{r, eval = F, include = T}
                  install.package("DBI")
                  ```
                - You can access whether the package `DBI` is installed in R by running the following R codes
                  ```{r, eval = F, include = T}
                  "DBI" %in% installed.packages()
                  ```
                - The version of the installed `DBI` package can be accessed by running the following R codes
                  ```{r}
                  packageVersion("DBI")
                  ```
              </details>
              - See package documentation by running `RShowDoc(what = "DBI", package = "DBI")`
            - **RODBC**
              - An R package developed by Brian Ripley and Michael Lapsley and maintained by Brian Ripley
              - Install/update the RODBC package from CRAN by running the R command if it hasn't been installed/needs to be updated
              - <details><summary>Installation guidance</summary>
                - Install the package `DBI` by running the following R codes
                  ```{r, eval = F, include = T}
                  install.package("DBI")
                  ```
                - It has been reported that the above method may not work for MacOS (e.g. <a href = "https://stackoverflow.com/questions/43804850/how-to-install-rodbc-on-macos-sierra-10-12-4" target = "_blank"> here on Stack Overflow </a>)
                - <details> <summary> Alternative method for MacOS </summary>
                  - Any CRAN packages can be installed in the terminal
                  - Install the Homebrew package if it hasn't been installed by running the following Bash commands in the terminal
                    - `/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"`
                  - Install wget using Homebrew if it hasn't been installed by running the following brew command line utility codes in the terminal
                    - `brew install wget`
                  - Download the package tar.gz file from CRAN to the Shell directory by running the following wget command-line interface codes in the terminal
                    - `wget "http://cran.r-project.org/src/contrib/tar_filename.tar.gz"`
                  - Install the package to R by running the following R command-line interface codes in the terminal
                    - `R CMD INSTALL tar_filename.tar.gz`
                      - ***Where***
                        - `tar_filename` is the name of the tar.gz file of the package on CRAN, which can change, especially with the version of the package. The name of the tar.gz file for the latest version an R package on CRAN can be found on CRAN <a href = "http://cran.r-project.org/src/contrib/" target = "_blank">here</a> 
                  - Remove the initially downloaded tar.gz file by running the following bash commands in the terminal 
                    - `rm tar_filename.tar.gz`
                      - ***Where***
                        - `tar_filename` is the name of the tar.gz file of the package initially downloaded from CRAN 
                  </details>
                - You can access whether the package `DBI` is installed in R by running the following R codes
                  ```{r, eval = F, include = T}
                  "DBI" %in% installed.packages()
                  ```
                - The version of the installed `DBI` package can be accessed by running the following R codes
                  ```{r, eval = F, include = T}
                  packageVersion("DBI")
                  ```
                </details>
              - See package documentation by running `RShowDoc(what = "RODBC", package = "RODBC")`
          - **Comparison**
            - Both `DBI` and `RODBC` are independently capable, reliable, simple to use, and developed by great developers. However, `DBI` has more functionalities (e.g. error handling, integrative functionalities with RStudio, specifically, it usefully shows the structure of the connected DBMS engine/server with databases, tables and table columns and their data types in the "Connection" pane), covers more types of DBMSs (not just ODBC-compliant ones), and, in some cases/reportedly seems to be faster than `RODBC` 

```{r}
?odbc::odbc
```

**Working with an ODBC-compliant DBMS from R**

- **Introduction**
  - As mentioned, ODBC-compliant DBMSs are worked with from R through an ODBC interface R package (e.g. `DBI` or `RODBC`) with specific operations handled by specific functions. The main operations are described for both `DBI` and `RODBC`.
- **Connect R to an ODBC-compliant DBMS**
  - **DBI**
    - The `dbConnect` function is a generic for connecting R to a DBMS
    - The `dbConnect` function has the general form and usage
      ```{r, eval = F, include = T}
      connection_object_dbi <- DBI::dbConnect(drv, ...)
      ```
        - ***Where***
          - `drv` specifies the type of the DBMS to be connected to using a back-end function for calling an appropriate method for connecting R to the specific DBMS. For ODBC-compliant DBMSs, it would be the `odbc::odbc()` function.
          - `...` is a set of argument(s) that depends on the back-end function to the `drv` argument (or the specific method being called), hence, refer to the back-end function for the specific set of arguments and details, these usually involve the DSN
  - **RODBC**
    - The `odbcDriverConnect` function connects R to an ODBC-compliant DBMS
    - The `odbcDriverConnect` function has the general form and usage
      ```{r, eval = F, include = T}
      connection_object_rodbc <- RODBC::odbcDriverConnect(connection)
      ```
        - ***Where***   
          - `connection` is the DSN (aka connection string). The format of a DSN is specific to the ODBC driver and/or ODBC-compliant DBMS. For example, the DSN for Microsoft SQL Server is "Driver={ODBC Driver 17 for SQL Server};Server={Server Name};Database={Database Name};"
        - ***Notes***
          - The `RODBC` packages actually provides two ways of doing this, one that's shown above, the other is through the `odbcConnect` function. The `odbcDriverConnect` method is preferred as the `odbcConnect` function is less flexible in that it requires the manual action of first setting up a DSN registry in the ODBC manager (e.g. ODBC Data Source Administrator application on Windows OS), which is done outside of R, while the `odbcDriverConnect` method doesn't require this step, hence `odbcDriverConnect` has advantages in terms of automation and collaboration. Though, many people still use `odbcConnect` probably because they haven't caught up with updates or even read package documentation at all or it not working for them. 
- **Sending request calls**
  - **DBI**
    - **Introduction**
      - The `DBI` package provides a set of functions for sending different request calls to the DBMS/DBMS driver upon being called. These functions can be organised in a hierarchy where lower level functions are used to send relatively simple/basic request calls (usually in line with ODBC standard calls) while higher level functions are built on multiple lower level functions and possibly other functions for sending more complex/abstract request calls (usually specific to R). Some of these functions are described below.
    - **Level 1 functions**
      - `dbSendQuery`
        - **Description**
          - Send an SQL select statement to a specified DBMS for execution and returns an instance of class `DBIResult`
          - This is recommended for simple SQL select statements, for more complex non-select data manipulation SQL statements, use `dbSendStatement` (see below)
        - **Usage**
          - `dbSendQuery(conn, statement,...)`
            - ***Where***
              - `conn` is a DBI connection object
              - `statement` is a SQL select statement 
              - `...` a set of arguments and inputs that is specific/to be passed on to a method (refer to the method for these)
      - `dbSendStatement`
        - **Description**
          - Send an SQL statement to a specified DBMS for execution and returns an instance of class `DBIResult`
          - This is recommended for non-select data manipulation SQL statements, for simple select SQL statements, use `dbSendQuery` (see above)
        - **Usage**
          - `dbSendStatement(conn, statement,...)`  
            - ***Where***
              - `conn` is a DBI connection object
              - `statement` is a SQL statement 
              - `...` a set of arguments and inputs that is specific/to be passed on to a method (refer to the method for these)
      - `dbGetRowsAffected`
        - **Description**
          - Takes an instance object of class `DBIResult` and returns the number of rows being affected due to a request call (e.g. by `dbSendQuery` or `dbSendStatement`)
        - **Usage**
          - `dbGetRowsAffected(res, ...)`
            - ***Where***
              - `res` is an object of class `DBIResult` 
              - `...` a set of arguments and inputs that are specific/to be passed on to a method (refer to the method for these)
      - `dbFetch`
        - **Description**
          - Fetch any results returned by the DBMS due to a request call and return them in the form of a data.frame
        - **Usage**
          - `dbFetch(res, n, ...)`
            - ***Where***
              - `res` is an object of class `DBIResult`
              - `n` is the maximum number of records to retrieve per fetch. `-1` or `Inf` to retrieve all pending records.
              - `...` a set of arguments and inputs that are specific/to be passed on to a method (refer to the method for these)
      - `dbHasCompleted`
        - **Description**
          - Takes an instance object of class `DBIResult` and returns a logical that indicates whether the request call execution has completed
        - **Usage**
          - `dbHasCompleted(res, ...)`
            - ***Where***
              - `res` is an object of class `DBIResult`
              - `...` a set of arguments and inputs that are specific/to be passed on to a method (refer to the method for these)
      - `dbClearResult`
        - **Description**
          - Takes an instance object of class `DBIResult` and frees all local and remote resources that have been used by a request call and its execution 
          - This is a necessity after a request call execution even if no rows have been affected/fetched or it led to an error
        - **Usage**
          - `dbClearResult(res, ...)`
            - ***Where***
              - `res` is an object of class `DBIResult`
              - `...` is a set of arguments and inputs that is specific/to be passed on to a method (refer to the method for these)
      - `dbQuoteIdentifier`
        - **Description**
          - Takes a DBI DBMS connection object and DBMS table identifier object and generates an SQL statement in a safe way (e.g. ensure characters are escaped, avoid SQL injection attacks)
        - **Usage**
          - `dbQuoteIdentifier(conn, x, ...)`
            - ***Where***
              - `conn` is a DBI DBMS connection object  
              - `x` is a character vector of column names and their data types, or an SQL statement (object of class `SQL`), or a DBMS table identifier (an object of class `Id`)
              - `...` is a set of arguments and inputs that is specific/to be passed on to a method (refer to the method for these)
      - `dbListTables`
        - **Description**
          - Show tables in a DBI DBMS connection
        - **Usage**
          - `dbListTables(conn, ...)`
            - ***Where***
              - `conn` is a DBI DBMS connection instance object   
              - `...` is a set of arguments and inputs that is specific/to be passed on to a method (refer to the method for these)
    - **Level 2 functions**
      - `sqlAppendTable`
        - **Description**
          - Takes a DBI DBMS connection instance object and DBMS table identifier and calls `dbQuoteIdentifier` to generate an SQL statement for appending an existing table 
          - This automates the process of typing the SQL statement for appending a table, which could be tedious if done manually on a large table
        - **Usage**
          - `sqlAppendTable(con, table, values, ...)`
            - ***Where***
              - `con` is a DBI DBMS connection instance object
              - `table` is a DBMS table identifier (a character string, an instance object of class `Id`, or an instance object of class `SQL`)
              - `values` is an instance object of class data.frame, this is the table in R to be defined in SQL in the SQL statement 
              - `...` a set of arguments and inputs that are either optional or are specific/to be passed on to a method 
      - `sqlCreateTable`
        - **Description**
          - Takes a DBI DBMS connection instance object and a DBMS table identifier and calls `dbQuoteIdentifier` to generate an SQL statement for creating a table
        - **Usage**
          - `sqlCreateTable(con, table, values, ...)`
            - ***Where***
              - `con` is a DBI DBMS connection instance object
              - `table` is a DBMS table identifier (a character string, an instance object of class `Id`, or an instance object of class `SQL`)
    - **Level 3 functions**
      - `dbExecute`
        - **Description**
          - Takes an SQL statement and sequentially calls `dbSendStatement`, `dbGetRowsAffected`, and `dbClearResults`
          - Automates the process of sending an SQL statement to a specified DBMS for execution 
        - **Usage**
          - `dbExecute(conn, statement, ...)`
            - ***Where***
              - `conn` is a DBI DBMS connection instance object   
              - `statement` is an SQL statement as a string
      - `dbGetQuery`
        - **Description**
          - Takes an SQL select statement and sequentially calls `dbSendQuery`, `dbFetch`, and `dbClearResults`
          - Automates the process of sending a retrieval (select) request
        - **Usage**
          - `dbGetQuery(conn, statement, ...)`
            - ***Where***
              - `conn` is a DBI DBMS connection object 
              - `statement` is an SQL select statement as a string
    - **Level 4 functions**
      - `dbReadTable`
        - **Description**
          - Takes a DBI DBMS connection instance-object and table identifier and calls `dbQuoteIdentifier` to generate an SQL select statement for the specified table and passes the SQL select statement to and calls `dbGetQuery`
          - This automates the process of reading a table in a DBMS from R
        - **Usage**
          - `dbReadTable(conn, name, ...)`
            - ***Where***
              - `conn` is a DBI DBMS connection instance-object
              - `name` is a table identifier, which is a character string with the unquoted DBMS table name (e.g. "table_name"), or an instance-object of class `Id`returned by the `DBI::Id` function, or an instance-object of class `SQL` returned by the `DBI::SQL` function
      - `dbCreateTable`
        - **Description**
          - Takes a DBI DBMS connection instance-object and a table identifier and calls `sqlCreateTable` to generate an SQL statement for creating a specified table and passes the SQL statement to and calls `dbExecute`
          - This creates a table in a more automated and safer way 
        - **Usage**
          - `dbCreateTable(conn, name, fields, ...)`
            - ***Where***
              - `conn` is a DBI DBMS connection instance-object of class `DBIConnection`
              - `name` is a table identifier, which can be a character string with the unquoted DBMS table name (e.g. "table_name"), or an instance-object of class `Id` returned by the `DBI::Id` function, or an instance-object of class `SQL` returned by the `DBI::SQL` function
      - `dbAppendTable`
        - **Description**
          - Takes a DBI DBMS connection instance-object, a table identifier, and a table in R and calls `sqlAppendTable` to generate an SQL statement for appending a specified table in a specified way and passes the SQL statement to and calls `dbExecute`
          - This appends a table in a more automated and safer way 
        - **Usage**
          - `dbAppendTable(conn, name, value, ...)`
            - ***Where***
              - `conn` is the DBMS connection instance-object of class `DBIConnection` returned by the `dbConnect` function
              - `name` is a table identifier, which can be a character string with the unquoted DBMS table name (e.g. "table_name"), or an instance-object of class `Id` returned by the `DBI::Id` function, or an instance-object of class `SQL` returned by the `DBI::SQL` function
      - `dbRemoveTable`
        - **Description**
          - 
        - **Usage**
          - `dbRemoveTable(conn, name, ...)`
            - ***Where***
              - `conn` is the DBMS connection instance-object of class `DBIConnection` returned by the `dbConnect` function   

      
              
```{r}
?dbRemoveTable
```
      - **Low-level functions**
        - `dbExecute`
    
    - The `DBI` package provides two methods, the "R environment method" in which request calls are coded in R in an R environment (e.g. R script, R console, R code chunk/block within an R Markdown or Quarto document) and the "SQL environment in an R environment method" in which request calls are coded in SQL in an SQL environment within an R environment (e.g. SQL code chunk/block in an R Markdown or Quarto document)

    that's in an R environment (e.g. R script, R console, R code chunk/block within an R Markdown or a Quarto document) and the other that's in an SQL environment within an R environment (i.e. SQL code chunk/block within an R Markdown or a Quarto document)
  - **RODBC**

DBIResult - An S4 Class for representing a statement execution, specifically, the results and state

 
LEVEL 2 FUNCTIONS

dbExecute - dbSendStatement, dbGetRowsAffected, dbClearResults
dbGetQuery - dbSendQuery, dbFetch, then dbClearResult 

LEVEL 3 FUNCTIONS
dbReadTable - Takes parameters and calls dbQuoteIdentifier to generate an SQL select statement and dbGetQuery
dbCreateTable - sqlCreateTable, dbExecute
dbAppendTable - sqlAppendTable, dbExecute
dbRemoveTable - Takes parameters and passes them to and calls dbQuoteIdentifier to generate an SQL statement for removing a table in the DBMS and dbExecute 
dbExistsTable - Takes parameters and passes them to and calls dbQuoteIdentifier to generate an SQL statement for checking if a table exists and pass the statement to dbExecute to execute 


LEVEL FOUR FUNCTIONS
dbWriteTable - A function for appending or overwriting an existing or non-existing table. For all cases, it first checks whether the specified table exists using dbExistsTable. For appending, if the table exists, it calls dbAppendTable to append the table, if the table doesn't exist, it calls dbCreateTable to create the table first and then dbAppendTable to append (or push) the table. For overwriting, if the table exists, it calls dbRemoveTable to remove the existing table, then calls dbCreateTable to create the table, and then calls dbAppendTable to append (or push) the table; if the table doesn't exist, it calls dbCreateTable to create the table, and then calls dbAppendTable to append (or push) the table. 




```{r eval = F}
?dbCreateTable
?dbWriteTable
?dbAppendTable
?sqlAppendTableTemplate
?dbRemoveTable
RShowDoc("DBI", package = "DBI")

?DBI::dbExistsTable
??odbc::dbWriteTable
?DBI::dbReadTable
?DBI::dbListTables
```
    





      
sdbGetRowCountsomethig
- Something
        - ***Notes***
          - The "Driver" and "Server" parameters are required while the "Database" parameter is optional and can be specified downstream when specifying a request call to the DBMS
    

  
```{r eval = F}

system(paste("open -a 'Google Chrome' ","_book/index.html"))


```

  
  
  
  
  
  
    
    For Windows, Windows comes with an ODBC manager, 
  The ODBC interface is usually associated with the application, specifically, it is either a functionality of the application or an extension to the application (e.g. packages/modules/plug-ins).  The ODBC-specific ODBC driver is usually a separate software associated with the DBMS The DBMS-specific ODBC driver is usually associated with the DBMS, 
- **Some terms**
  - **DBMS**
    - A system for managing data 
    - Examples include Microsoft SQL Server, Microsoft Access, Oracle, MySQL, PostgreSQL, MariaDB, SQLite
  - **Open Database Connectivity (ODBC)**
    - An ODBC is a connection between a software/application (e.g. R, Python, SPSS, Excel) and a DBMS through an ODBC interface/system (a standardised connection)
  - **ODBC-compliant DBMS**
    - ODBC-compliant DBMSs are DBMSs that adheres to the ODBC standards to allow applications to access them through ODBC (a standardised way of doing so)
    - ODBC-compliant DBMSs include Microsoft SQL Server, Microsoft Access, MySQL, PostgreSQL, Oracle Database, IBM Db2, SQLite, MariaDB, Amazon Redshift, Google BigQuery, etc.
  
```{r}

```

  
  **Open Database Connectivity (ODBC)**

- **Concept**
  - An ODBC is a connection between an software/application (e.g. R, Python, SPSS, Excel) and a DBMS
  
**ODBC interface**

- **Concept**
  - An API that manages one or more ODBCs
  - Provides a standard and general set of calls/commands (via ODBC functions) for softwares/applications to ODBC compliant DBMS (e.g. executing an SQL script), this standarisation and generalisation enables an ODBC to be independent of applications
  - Developed by Microsoft in early 1990s
  
  
**ODBC driver**

- **Concept**
  - An ODBC driver provides a connection between an ODBC interface and a DBMS
  - An ODBC interface connects to different ODBC drivers as different DBMSs operate differently thus have their own specific DBMS function calls
  - An ODBC driver translates ODBC function calls into DBMS-specific function calls and passes them to the specific DBMS
  - This enables an ODBC interface to be independent of DBMSs
  - E.g. The old SQL Server and the new ODBC for SQL Server (these are drivers, despite having the word "servers" in their names)


```{r}

```


**DSN**
- A parametric data structure/format that contains information for an ODBC driver to connect to a specific part of a DBMS (e.g. server/engine/database/table)
- DSNs are ODBC driver-specific, but they tend to be simple and short with common parameters 
- Parameters of the DSN for an ODBC driver includes the name of the engine, name of the server, name of the database, name of the table, username and password for access


**Windows**
- **In general**
  - 
- ODBC Interface (API)
- ODBC Drivers

- 
- ODBC Data Source Administrator
- ODBC Manager 
- ODBC driver 




- 
- Set up a connection between the ODBC interface and the database 
- ODBC driver (install)
- The ODBC Data Source Administrator (64-bit)

- Set up a connection between R and the ODBC interface 
- R


