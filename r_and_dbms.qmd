# Working with DBMS using R



**Introduction**

- Various DBMSs can be worked with using R
- The specific way that this is done differ between the DBMSs and operating system




**Working with ODBC-compliant DBMS from ODBC-compliant applications**

- **The General Process**
  - ODBC-compliant DBMSs and applications are those that adhere to ODBC standards thus can be connected through ODBC 
  - ODBC-compliant DBMSs include Microsoft SQL Server, Microsoft Access, and MySQL, ODBC-compliant applications include R, Python, Excel, and SPSS
  - Working with an ODBC-compliant DBMS from an ODBC-compliant application necessarily involves, in addition to the application and the DBMS, an ODBC interface, an ODBC manager, and a DBMS-specific ODBC driver, all for mediating the connection between the application and the DBMS. 
  - Upon a request being called by the application, the application sends the application-specific call to the ODBC interface, the ODBC interface translates the application-specific calls from the application to an ODBC call, which is a call adhering to the ODBC standards, through its ODBC functions, it then establishes a connection with and sends the ODBC call to the DBMS-specific ODBC driver either directly or indirectly through the ODBC manager, which manages one or more DBMS-specific ODBC drivers. 
  - The DBMS-specific ODBC driver translates the ODBC call to a DBMS-specific call (which may involve DBMS-specific SQL), it then establishes a connection to and sends the DBMS-specific call to the DBMS (e.g. its server/engine) where the call is executed. 
  - If the call involves extracting information from the DBMS, the DBMS sends the information to its DBMS-specific ODBC driver, the DBMS-specific ODBC driver fetches the information from the DBMS, translates it to an ODBC information, and sends it to the ODBC interface, the ODBC interface fetches the ODBC information from the DBMS-specific driver and may further process it (e.g. translation) if there is an upper layer (e.g. application). 
- **General Steps**
  1. **Make sure an ODBC manager is ready for use**
      - ODBC managers are usually an individual software/programme that are specific to an operating system, hence, they should be considered with regards to specific operating systems:
        - **Windows OS**
          - Windows OS comes with an ODBC manager in the form of a system application called "ODBC Data Source Administrator". 
        - **MacOS**
          - MacOs used to come with an ODBC manager in form of system application called "ODBC Administrator" until Mac OS "Snow Leopard" from which ODBC managers for MacOS are downloaded from external developers. ODBC managers for MacOS include:
            - **ODBC Manager** 
              - ODBC Manager is free proprietary ODBC manager developed by Actual Technologies 
              - Go to <a href = "https://odbcmanager.net/" target = "_blank"> ODBC Manger </a> to learn more or download 
            - **Independent ODBC (iODBC) for MacOS** 
              - iODBC is both an open-source initiative initiated and managed by OpenLink Software that encourages the open-source development of ODBC managers for various Linux or Unix-based OS (incl. MacOS) and the ODBC managers under this initiative 
              - Go to <a href = "https://www.iodbc.org/dataspace/doc/iodbc/wiki/iodbcWiki/WelcomeVisitors" target = "_blank"> iODBC </a> to learn more about iODBC and to download
  2. **Make sure an ODBC driver for the DBMS is ready for use**
      - ODBC-specific ODBC drivers are usually an individual software/programme that is specific to a DBMS, hence, they should be considered with regards to the DBMS:
        - **Microsoft SQL Server** 
          - **ODBC Driver for SQL Server**
            - Developed and distributed by Microsoft 
            - Go to <a href = "https://learn.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver16" target = "_blank"> ODBC Driver for SQL Server </a> to learn more or download 
        - **MySQL**
          - **Connector/ODBC**
            - Developed and distributed by MySQL 
            - Go to <a href = "https://dev.mysql.com/downloads/connector/odbc/" target = "_blank"> MySQL </a> to download
  3. **Make sure an ODBC interface is ready for use**
      - ODBC interfaces are usually specific to the application and exist as either an in-built functionality of the application or an extension (e.g. packages/modules/plug-ins), hence, they should be considered with regards to the application:
        - **R**
          - ODBC interfaces for R are in the form of R packages (aka ODBC interface R packages) with specific operations handled by specific functions. There are multiple ODBC interface R packages that are independently capable of working with an ODBC-compliant DBMS. The main ODBC interface R packages are:
            - **DBI**
              - An R package in CRAN developed by R Special Interest Group on Databases (R-SIG-DB) and Hadley Wickham and maintained by Kirill MÃ¼ller
              - Install/update the DBI package from CRAN by running the R command if it hasn't been installed/needs to be updated 
              - <details><summary>Installation guidance</summary>
                - Install the package `DBI` by running the following R codes
                  ```{r, eval = F, include = T}
                  install.package("DBI")
                  ```
                - You can access whether the package `DBI` is installed in R by running the following R codes
                  ```{r, eval = F, include = T}
                  "DBI" %in% installed.packages()
                  ```
                - The version of the installed `DBI` package can be accessed by running the following R codes
                  ```{r}
                  packageVersion("DBI")
                  ```
              </details>
              - See package documentation by running `RShowDoc(what = "DBI", package = "DBI")`
            - **RODBC**
              - An R package developed by Brian Ripley and Michael Lapsley and maintained by Brian Ripley
              - Install/update the RODBC package from CRAN by running the R command if it hasn't been installed/needs to be updated
              - <details><summary>Installation guidance</summary>
                - Install the package `DBI` by running the following R codes
                  ```{r, eval = F, include = T}
                  install.package("DBI")
                  ```
                - It has been reported that the above method may not work for MacOS (e.g. <a href = "https://stackoverflow.com/questions/43804850/how-to-install-rodbc-on-macos-sierra-10-12-4" target = "_blank"> here on Stack Overflow </a>)
                - <details> <summary> Alternative method for MacOS </summary>
                  - Any CRAN packages can be installed in the terminal
                  - Install the Homebrew package if it hasn't been installed by running the following Bash commands in the terminal
                    - `/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"`
                  - Install wget using Homebrew if it hasn't been installed by running the following brew command line utility codes in the terminal
                    - `brew install wget`
                  - Download the package tar.gz file from CRAN to the Shell directory by running the following wget command-line interface codes in the terminal
                    - `wget "http://cran.r-project.org/src/contrib/tar_filename.tar.gz"`
                  - Install the package to R by running the following R command-line interface codes in the terminal
                    - `R CMD INSTALL tar_filename.tar.gz`
                      - ***Where***
                        - `tar_filename` is the name of the tar.gz file of the package on CRAN, which can change, especially with the version of the package. The name of the tar.gz file for the latest version an R package on CRAN can be found on CRAN <a href = "http://cran.r-project.org/src/contrib/" target = "_blank">here</a> 
                  - Remove the initially downloaded tar.gz file by running the following bash commands in the terminal 
                    - `rm tar_filename.tar.gz`
                      - ***Where***
                        - `tar_filename` is the name of the tar.gz file of the package initially downloaded from CRAN 
                  </details>
                - You can access whether the package `DBI` is installed in R by running the following R codes
                  ```{r, eval = F, include = T}
                  "DBI" %in% installed.packages()
                  ```
                - The version of the installed `DBI` package can be accessed by running the following R codes
                  ```{r, eval = F, include = T}
                  packageVersion("DBI")
                  ```
                </details>
              - See package documentation by running `RShowDoc(what = "RODBC", package = "RODBC")`
          - **Comparison**
            - Both `DBI` and `RODBC` are independently capable, reliable, simple to use, and developed by great developers. However, `DBI` has more functionalities (e.g. error handling, integrative functionalities with RStudio, specifically, it usefully shows the structure of the connected DBMS engine/server with databases, tables and table columns and their data types in the "Connection" pane), covers more types of DBMSs (not just ODBC-compliant ones), and, in some cases/reportedly seems to be faster than `RODBC` 

```{r}
?odbc::odbc
```

**Working with an ODBC-compliant DBMS from R**

- **Introduction**
  - As mentioned, ODBC-compliant DBMSs are worked with from R through an ODBC interface R package (e.g. `DBI` or `RODBC`) with specific operations handled by specific functions. The main operations are described for both `DBI` and `RODBC`.
- **Connect R to an ODBC-compliant DBMS**
  - **DBI**
    - The `dbConnect` function is a generic for connecting R to a DBMS
    - The `dbConnect` function has the general form and usage
      ```{r, eval = F, include = T}
      connection_object_dbi <- DBI::dbConnect(drv, ...)
      ```
        - ***Where***
          - `drv` specifies the type of the DBMS to be connected to using a back-end function for calling an appropriate method for connecting R to the specific DBMS. For ODBC-compliant DBMSs, it would be the `odbc::odbc()` function.
          - `...` is a set of argument(s) that depends on the back-end function to the `drv` argument (or the specific method being called), hence, refer to the back-end function for the specific set of arguments and details, these usually involve the DSN
  - **RODBC**
    - The `odbcDriverConnect` function connects R to an ODBC-compliant DBMS
    - The `odbcDriverConnect` function has the general form and usage
      ```{r, eval = F, include = T}
      connection_object_rodbc <- RODBC::odbcDriverConnect(connection)
      ```
        - ***Where***   
          - `connection` is the DSN (aka connection string). The format of a DSN is specific to the ODBC driver and/or ODBC-compliant DBMS. For example, the DSN for Microsoft SQL Server is "Driver={ODBC Driver 17 for SQL Server};Server={Server Name};Database={Database Name};"
        - ***Notes***
          - The `RODBC` packages actually provides two ways of doing this, one that's shown above, the other is through the `odbcConnect` function. The `odbcDriverConnect` method is preferred as the `odbcConnect` function is less flexible in that it requires the manual action of first setting up a DSN registry in the ODBC manager (e.g. ODBC Data Source Administrator application on Windows OS), which is done outside of R, while the `odbcDriverConnect` method doesn't require this step, hence `odbcDriverConnect` has advantages in terms of automation and collaboration. Though, many people still use `odbcConnect` probably because they haven't caught up with updates or even read package documentation at all or it not working for them. 
- **Send a request call to the DBMS**
  - **DBI**
    - The `DBI` package has a set of low-level functions for executing different specific operations when sending a request call to a DBMS (e.g. sending the request to the DBMS, fetching the results, clearing the result in the DBMS, etc.) and a set of high-level functions which execute multiple low-level functions at once for ease and perhaps for additional functionalities:
      - **Low-level functions**
        - `dbExecute`
    
    - The `DBI` package provides two methods, the "R environment method" in which request calls are coded in R in an R environment (e.g. R script, R console, R code chunk/block within an R Markdown or Quarto document) and the "SQL environment in an R environment method" in which request calls are coded in SQL in an SQL environment within an R environment (e.g. SQL code chunk/block in an R Markdown or Quarto document)
      - **R environment method**
        - The `dbGetQuery` function takes a DBI connection object (returned from `dbConnect`) and a request call in SQL, upon being called, it sends the request call to the DBMS (specified in the DBI connection object) where the request call is executed and fetch and return any results returned from the DBMS.
        ```{r}
        
  
        ```
    
    that's in an R environment (e.g. R script, R console, R code chunk/block within an R Markdown or a Quarto document) and the other that's in an SQL environment within an R environment (i.e. SQL code chunk/block within an R Markdown or a Quarto document)
  - **RODBC**
    - 
dbSendStatement - Submits and executes statement for data manipulation and select queries
dbSendQuery - Submits and executes statement for select queries 
dbFetch - Fetch results from the DBMS and return them as a data.frame
dbExecute - calls dbSendStatement to send and execute statements, then calls dbGetRowsAffected, then calls dbClearResults
dbGetQuery - First calls dbSendQuery, then dbFetch, then dbClearResult to clear result in DBMS
dbGetRowsAffected - Returns the number of rows being affected given an object inheriting from DBIResult (internal function)
dbCreateTable - Creates a table - First calls sqlCreateTable to create an SQL statement for creating a table, then pass the statement to dbExecute to execute the statement to create the table 
dbWriteTable - Create and write a table - I believe it creates a table with dbCreateTable first (the documentation didn't say). It uses dbExistsTable and dbRemoveTable for overwriting tables 
dbAppendTable - Assuming a table has been created beforehand, it calls sqlAppendTableTemplate to create an SQL statement for appending the table in a specific way and pass the statement to dbExecute to execute the statement in DBMS
dbRemoveTable - Generates SQL statement using dbQuoteIdentifier then pass it to dbExecute

```{r eval = F}
?DBI::dbAppendTable
?DBI::dbReadTable
?DBI::dbRemoveTable
```
    





      
sdbGetRowCountsomethig
- Something
        - ***Notes***
          - The "Driver" and "Server" parameters are required while the "Database" parameter is optional and can be specified downstream when specifying a request call to the DBMS
    

  
```{r eval = F}

system(paste("open -a 'Google Chrome' ","_book/index.html"))


```

  
  
  
  
  
  
    
    For Windows, Windows comes with an ODBC manager, 
  The ODBC interface is usually associated with the application, specifically, it is either a functionality of the application or an extension to the application (e.g. packages/modules/plug-ins).  The ODBC-specific ODBC driver is usually a separate software associated with the DBMS The DBMS-specific ODBC driver is usually associated with the DBMS, 
- **Some terms**
  - **DBMS**
    - A system for managing data 
    - Examples include Microsoft SQL Server, Microsoft Access, Oracle, MySQL, PostgreSQL, MariaDB, SQLite
  - **Open Database Connectivity (ODBC)**
    - An ODBC is a connection between a software/application (e.g. R, Python, SPSS, Excel) and a DBMS through an ODBC interface/system (a standardised connection)
  - **ODBC-compliant DBMS**
    - ODBC-compliant DBMSs are DBMSs that adheres to the ODBC standards to allow applications to access them through ODBC (a standardised way of doing so)
    - ODBC-compliant DBMSs include Microsoft SQL Server, Microsoft Access, MySQL, PostgreSQL, Oracle Database, IBM Db2, SQLite, MariaDB, Amazon Redshift, Google BigQuery, etc.
  
```{r}

```

  
  **Open Database Connectivity (ODBC)**

- **Concept**
  - An ODBC is a connection between an software/application (e.g. R, Python, SPSS, Excel) and a DBMS
  
**ODBC interface**

- **Concept**
  - An API that manages one or more ODBCs
  - Provides a standard and general set of calls/commands (via ODBC functions) for softwares/applications to ODBC compliant DBMS (e.g. executing an SQL script), this standarisation and generalisation enables an ODBC to be independent of applications
  - Developed by Microsoft in early 1990s
  
  
**ODBC driver**

- **Concept**
  - An ODBC driver provides a connection between an ODBC interface and a DBMS
  - An ODBC interface connects to different ODBC drivers as different DBMSs operate differently thus have their own specific DBMS function calls
  - An ODBC driver translates ODBC function calls into DBMS-specific function calls and passes them to the specific DBMS
  - This enables an ODBC interface to be independent of DBMSs
  - E.g. The old SQL Server and the new ODBC for SQL Server (these are drivers, despite having the word "servers" in their names)


```{r}

```


**DSN**
- A parametric data structure/format that contains information for an ODBC driver to connect to a specific part of a DBMS (e.g. server/engine/database/table)
- DSNs are ODBC driver-specific, but they tend to be simple and short with common parameters 
- Parameters of the DSN for an ODBC driver includes the name of the engine, name of the server, name of the database, name of the table, username and password for access


**Windows**
- **In general**
  - 
- ODBC Interface (API)
- ODBC Drivers

- 
- ODBC Data Source Administrator
- ODBC Manager 
- ODBC driver 




- 
- Set up a connection between the ODBC interface and the database 
- ODBC driver (install)
- The ODBC Data Source Administrator (64-bit)

- Set up a connection between R and the ODBC interface 
- R


